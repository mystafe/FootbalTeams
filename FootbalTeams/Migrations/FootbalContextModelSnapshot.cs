// <auto-generated />
using System;
using FootbalTeams.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FootbalTeams.Migrations
{
    [DbContext(typeof(FootbalContext))]
    partial class FootbalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FootbalTeams.Models.ORM.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("FootbalTeams.Models.ORM.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("FootbalTeams.Models.ORM.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double?>("AttackPower")
                        .HasColumnType("float");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<double?>("DefencePower")
                        .HasColumnType("float");

                    b.Property<double?>("GoalkeepingPower")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlayerPosition")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("FootbalTeams.Models.ORM.Stadium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("TeamId")
                        .IsUnique()
                        .HasFilter("[TeamId] IS NOT NULL");

                    b.ToTable("Stadiums");
                });

            modelBuilder.Entity("FootbalTeams.Models.ORM.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double?>("AttackPower")
                        .HasColumnType("float");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<double?>("DefencePower")
                        .HasColumnType("float");

                    b.Property<double?>("GoalkeepingPower")
                        .HasColumnType("float");

                    b.Property<double?>("MiddlefieldPower")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StadiumId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("FootbalTeams.Models.ORM.City", b =>
                {
                    b.HasOne("FootbalTeams.Models.ORM.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("FootbalTeams.Models.ORM.Player", b =>
                {
                    b.HasOne("FootbalTeams.Models.ORM.City", "City")
                        .WithMany("Players")
                        .HasForeignKey("CityId");

                    b.HasOne("FootbalTeams.Models.ORM.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId");

                    b.Navigation("City");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FootbalTeams.Models.ORM.Stadium", b =>
                {
                    b.HasOne("FootbalTeams.Models.ORM.City", "City")
                        .WithMany("Stadiums")
                        .HasForeignKey("CityId");

                    b.HasOne("FootbalTeams.Models.ORM.Team", "Team")
                        .WithOne("Stadium")
                        .HasForeignKey("FootbalTeams.Models.ORM.Stadium", "TeamId");

                    b.Navigation("City");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FootbalTeams.Models.ORM.Team", b =>
                {
                    b.HasOne("FootbalTeams.Models.ORM.City", "City")
                        .WithMany("Teams")
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("FootbalTeams.Models.ORM.City", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Stadiums");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("FootbalTeams.Models.ORM.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("FootbalTeams.Models.ORM.Team", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Stadium");
                });
#pragma warning restore 612, 618
        }
    }
}
